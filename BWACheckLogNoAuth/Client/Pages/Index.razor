@using BWACheckLogNoAuth.Shared.Models
@page "/"
@inject HttpClient Http

<h1>[Meratus] Check-Log</h1>

@if (listSurveyQuestion == null)
{
    <p><em>Loading...</em></p>
}
else
{


    @*<div>
            <div id="question1">
                @surveyQuestions[0].Question
            </div>
            <div id="desc1">
                @surveyQuestions[0].Description
            </div>
            <div id="answer1">
                @if (surveyQuestions[0].SurveyAnswers.First().AnswerType.Equals("Dropdown"))
                {
                    <select id="answer-opt1" @onchange="@handleChange">
                        @foreach (var answer in surveyQuestions[0].SurveyAnswers)
                        {
                            <option value="@(answer.Answer + "_" + answer.NextQuestion.ToString())">@answer.Answer</option>
                        }
                    </select>
                }
                else if (surveyQuestions[0].SurveyAnswers.First().AnswerType.Equals("TextBox"))
                {
                    <input for="Name" class="form-control" @bind="@tempAnswerText" />
                }
            </div>
        </div>*@
    <QuestionTemplate currQuestion="1" surveyQuestion="@listSurveyQuestion[0]"
                      onChangeDropCallBack="@HandleChangeDrop"
                      >
    </QuestionTemplate>

    @if (currQuestion >= 2)
    {
<QuestionTemplate currQuestion="2"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[0].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  onChangeTextBoxCallBack="@HandleChangeTextBox"
                  @bind-TbAnswer="tbAnswer"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 3)
    {
<QuestionTemplate currQuestion="3"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[1].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 4)
    {
<QuestionTemplate currQuestion="4"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[2].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 5)
    {
<QuestionTemplate currQuestion="5"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[3].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 6)
    {
<QuestionTemplate currQuestion="6"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[4].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 7)
    {
<QuestionTemplate currQuestion="7"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[5].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 8)
    {
<QuestionTemplate currQuestion="8"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[6].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 9)
    {
<QuestionTemplate currQuestion="9"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[7].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 10)
    {
<QuestionTemplate currQuestion="10"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[8].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 11)
    {
<QuestionTemplate currQuestion="11"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[9].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 12)
    {
<QuestionTemplate currQuestion="12"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[10].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 13)
    {
<QuestionTemplate currQuestion="13"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[11].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 14)
    {
<QuestionTemplate currQuestion="14"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[12].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }
    @if (currQuestion >= 15)
    {
<QuestionTemplate currQuestion="15"
                  surveyQuestion="@listSurveyQuestion.Where(x => x.Id == listTempResponse[13].NextQuestionId).FirstOrDefault()"
                  onChangeDropCallBack="@HandleChangeDrop"
                  >
</QuestionTemplate>
    }

    @if (listTempResponse.Count() > 0 && listTempResponse.Last().NextQuestionId.Equals(0))
    {
        <div class="form-group">
            <input type="submit" value="Submit" @onclick="@(async () => await Delete())" class="btn btn-primary" />
        </div>
    }
    
<h1>Parent Component @tbAnswer</h1>

    <p>Parent <code>year</code>: @year</p>

    <button @onclick="UpdateYear">Update Parent <code>year</code></button>

    <Child @bind-Year="year" />

}


@code{
    private Random r = new Random();
    private int year = 1979;

    private void UpdateYear()
    {
        year = r.Next(1950, 2021);
    }


    private IList<SurveyQuestion> listSurveyQuestion;
    //private SurveyQuestion[] surveyQuestions;
    private UserResponse userResponse = new UserResponse();
    private ResponseDetail[] responseDetails;
    private IList<TempResponse> listTempResponse = new List<TempResponse>();
    private string tempAnswer = "";
    private string tbAnswer = "";
    private int currQuestion = 1;
    private int? nextQuestion;
    //private int nextIndex = 0;


    protected override async Task OnInitializedAsync()
    {
        //surveyQuestions = await Http.GetJsonAsync<SurveyQuestion[]>("/api/Survey/questions");

        //surveyQuestions.

        listSurveyQuestion = await Http.GetJsonAsync<IList<SurveyQuestion>>("/api/Survey/questions");

        //listSurveyQuestion
    }

    protected async Task Delete()
    {
        await Http.DeleteAsync("api/Recipe/delete/");
        Console.WriteLine(tempAnswer.ToString());
    }

    protected void Update(ResponseDetail responseDetail)
    {
        responseDetails.Append(responseDetail);
    }

    void HandleChangeTextBox(ChangeEventArgs e)
    {
        tempAnswer = e.Value.ToString();
        Console.WriteLine("tbValue:" + tempAnswer);
        Console.WriteLine("tbValue:" + tbAnswer);
    }

    void HandleChangeDrop(ChangeEventArgs e)
    {
        tempAnswer = e.Value.ToString();
        Console.WriteLine("User Response No_Answ_NextQ: " + tempAnswer);
        nextQuestion = int.Parse((tempAnswer.Split('~')[1]).Split('_')[2]);
        //nextIndex = surveyQuestions.IndexOf
        if (nextQuestion >= 0)
        {
            //var tes = surveyQuestions.ToList<SurveyQuestion>();
            //nextIndex = tes.IndexOf(surveyQuestions.First(x => x.Id.Equals(nextQuestion)));

            var answer = tempAnswer.Split('~')[0];
            var questionNo = int.Parse((tempAnswer.Split('~')[1]).Split('_')[0]);
            var questionId = int.Parse((tempAnswer.Split('~')[1]).Split('_')[1]);
            var nextQuestionId = int.Parse((tempAnswer.Split('~')[1]).Split('_')[2]);

            var newResponse = new TempResponse
            {
                Answer = answer,
                QuestionNo = questionNo,
                QuestionId = questionId,
                NextQuestionId = nextQuestionId,
                Question = listSurveyQuestion.Where(x => x.Id == questionId).FirstOrDefault().Question,
                ResponseTime = DateTime.UtcNow

            };

            UpdateResponse(newResponse);
        }
        //else if(nextQuestion.Equals(0))
        //    {
        //        UpdateResponse(newResponse);
        //    }

        tempAnswer = "";
        if (listTempResponse.Last().NextQuestionId != 0)
        {
            currQuestion = listTempResponse.Count() + 1;
        }
        //Console.WriteLine(tempAnswer.ToString());
    }

    void UpdateResponse(TempResponse tempResponse)
    {
        var check = listTempResponse.FirstOrDefault(x => x.QuestionId.Equals(tempResponse.QuestionId));
        if (check != null)
        {
            Console.WriteLine("check != null:" + check.QuestionId);
            var idx = listTempResponse.IndexOf(check);
            Console.WriteLine("idx :" + idx);
            var count = listTempResponse.Count();
            Console.WriteLine("before listTempResponse.count :" + listTempResponse.Count);

            for (int i = idx; i < count; i++)
            {
                Console.WriteLine($"Question:{listTempResponse[idx].Question}-NextQuestionId:{listTempResponse[idx].NextQuestionId}");
                Console.WriteLine("RemoveAt(idx):" + idx);

                listTempResponse.RemoveAt(idx);
            }

            Console.WriteLine("listTempResponse.count :" + listTempResponse.Count);
            listTempResponse.Add(tempResponse);
            Console.WriteLine("after listTempResponse.count :" + listTempResponse.Count);
        }
        else
        {
            Console.WriteLine("check == null:");
            listTempResponse.Add(tempResponse);

            Console.WriteLine("listTempResponse.count :" + listTempResponse.Count);
        }
    }
}
